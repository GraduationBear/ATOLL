@page "/graphique"
@inject NavigationManager NavigationManager
@using System.Dynamic;

<div id="ensemble">
    <div id="haut">
        @*Affichage de la dropdown list*@
        <SfDropDownList TValue="string" Placeholder="Choisir une antenne" TItem="string" @bind-Value="@selected" DataSource="@ants.GetNoms()" Width="200px">
            <DropDownListEvents TItem="string" TValue="string" ValueChange="SetTabs" ></DropDownListEvents>
            <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
        </SfDropDownList>
        <div id="onglets">
            <nav>
                @*Affichage du bouton en fonction du contexte*@
                @if (this.swap)
                {
                    <button class="btn btn-primary" @onclick="clickBtnChange">Polaire</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="clickBtnChange">Cartesien</button>
                }
            </nav>
        </div>
    </div>
     
    <div id="tabgraph" class="border-top-0">
        
        <div id="table">
                @*Affichage du tableau de valeurs*@
                <SfGrid DataSource="@tableauRaw" AllowSorting="true" Toolbar="@ToolbarItems">
                    <GridEvents OnActionComplete="refresh" TValue="ExpandoObject"></GridEvents>
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
                    <GridColumns>
                        <GridColumn Field="count"
                                    HeaderText="N°"
                                    TextAlign="TextAlign.Center"
                                    IsPrimaryKey="true">

                        </GridColumn>
                        <GridColumn Field="X"
                                    HeaderText="AZ"
                                    TextAlign="TextAlign.Center"
                                    
                                    >
                        </GridColumn>  
                        <GridColumn Field="Y"
                                    HeaderText="Amp"
                                    TextAlign="TextAlign.Center"
                                    >
                        </GridColumn>
                        <GridColumn Field="Z"
                                    HeaderText="Phase"
                                    TextAlign="TextAlign.Center"
                                    >
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
        
        </div>
        <div id="chart">
            
            @*Affichage du graphique selectionné*@
            @if (this.swap)
            {
                <SfChart @ref="@Chart" Title="@selected" Palettes="@palettes">
                    <ChartPrimaryXAxis Minimum="-180" Maximum="180" Interval="30" CrossesAt="0"/>
                    <ChartPrimaryYAxis Minimum="0" Maximum="1" CrossesAt="0"/>

                    <ChartSeriesCollection>
                        
                            <Syncfusion.Blazor.Charts.ChartSeries DataSource="@tableauCart" XName="X" YName="Y" DrawType="ChartDrawType.Spline">
                                    <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                            </Syncfusion.Blazor.Charts.ChartSeries>
                        
                        
                    </ChartSeriesCollection>
                </SfChart>
            }
            else if (!this.swap)
            {
                <SfChart @ref="@Chart" Title="@selected" Palettes="@palettes">
                    <ChartPrimaryXAxis StartAngle="90" Minimum="0" Maximum="360" Interval="30"> </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="0" Maximum="1"/>
                    <ChartSeriesCollection>
                        <Syncfusion.Blazor.Charts.ChartSeries DataSource="@tableauRaw" XName="X" Width="2" Opacity="1" YName="Y"
                                     Type="ChartSeriesType.Polar" DrawType="ChartDrawType.Spline">
                                     
                                     <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                        </Syncfusion.Blazor.Charts.ChartSeries>
                        
                    </ChartSeriesCollection>
                </SfChart>
            }
        </div>
    </div>
</div>


@code {

    @*Références aux graphiques*@
    SfChart Chart;

    @*Barre d'outils au dessus du tableau de données*@
    public string[] ToolbarItems = new string[] { "Edit", "Update", "Cancel" };


    //Attribut "swap"  TRUE : affiche le cartesien
    //          FALSE : affiche le  polaire
    private bool swap = true;

    //Variable stockant les antennes du fichier Antennas
    private Antennes ants = new Antennes();

    //Variable désignant l'antenne selectionnée
    private string selected;

    //Palette de couleur des graphiques
    public String[] palettes = new String[] { "#E94649", "#F6B53F", "#6FAAB0" };

    //Liste contenant respectivement les données brutes
    public List<ExpandoObject> tableauRaw{ get; set; }= new List<ExpandoObject>();

    //Liste contenant les données traitées pour être afficher en cartesien
    private List<ExpandoObject> tableauCart{ get;set; } = new List<ExpandoObject>();



    @*Redefinition de la méthode OnInitialized, qui se lance au chargement de la page*@
    protected override void OnInitialized()
    {
        //Au premier chargement, on affiche le premier graphique de la liste
        this.selected = ants.GetFirst().GetNom();

        //On prend son contenu dans un tableau de string
        string[] cnt = ants.SearchAntenneByName(selected).GetContent();

        //On prévient avec cette variable "ci" que notre fichier contient des "." et on des ","
        var ci = (CultureInfo)CultureInfo.CurrentCulture.Clone();
        ci.NumberFormat.NumberDecimalSeparator = ".";

        //Expression régulière permettant de conserver les chiffres et les points par groupes
        string pattern = @"([0-9\.\S])+";
        Regex rgx = new Regex(pattern);


        //On récupère le nombre de points
        int maxindex = ants.SearchAntenneByName(selected).GetTaille();

        //Remplissage du tableauRaw par des ExpandoObject représentant nos points(x,y,z)
        this.tableauRaw = Enumerable.Range(5,maxindex).Select((i) =>
        {
            //On proède ligne par ligne
            string str = cnt[i];

            double az = double.Parse(rgx.Matches(str)[0].Value, ci);
            double amp = double.Parse(rgx.Matches(str)[1].Value, ci);
            double phase = double.Parse(rgx.Matches(str)[2].Value, ci);

            dynamic dynamicObj = new ExpandoObject();
            dynamicObj.count = i - 5;
            dynamicObj.X = az;
            dynamicObj.Y = amp;
            dynamicObj.Z = phase;

            return dynamicObj;
        }).Cast<ExpandoObject>().ToList<ExpandoObject>();

        this.setCartesien();

    }

    @*méthode permettant de définir le tableau cartésien*@
    public void setCartesien()
    {

        //On récupère l'index à la moitié 
        int moitie = (tableauRaw.Count() )/ 2;

        //On itère en injectant dans le tableauCart les valeurs que l'on modifie
        this.tableauCart = Enumerable.Range(0,tableauRaw.Count()+1).Select((i) =>
        {

            dynamic dynamicObj = new ExpandoObject();


        //Avant la moitié de l'index 
            if (i < moitie)
            {
                foreach (KeyValuePair<string, object> kvp in tableauRaw[moitie+i])
                {

                    if (kvp.Key == "Y")
                    {
                        dynamicObj.Y = (double)kvp.Value;
                    }
                    else if (kvp.Key == "Z")
                    {
                        dynamicObj.Z = (double)kvp.Value;
                    }
                }
                foreach (KeyValuePair<string, object> kvp in tableauRaw[i])
                {

                    if (kvp.Key == "X")
                    {
                        dynamicObj.X = (double)kvp.Value - 180;
                    }
                    if (kvp.Key == "count")
                    {
                        dynamicObj.count = (int)kvp.Value;
                    }
                }
            }//Après la moitié de l'index
            else if(i>=moitie && i<tableauRaw.Count())
            {

                foreach (KeyValuePair<string, object> kvp in tableauRaw[i])
                {
                    if (kvp.Key == "X")
                    {
                        dynamicObj.X = (double)kvp.Value - 180;
                    }
                    if (kvp.Key == "count")
                    {
                        dynamicObj.count = (int)kvp.Value;
                    }

                }
                foreach (KeyValuePair<string, object> kvp in tableauRaw[i-moitie])
                {  
                    if (kvp.Key == "Y")
                    {
                        dynamicObj.Y = (double)kvp.Value;
                    }
                    else if (kvp.Key == "Z")
                    {
                        dynamicObj.Z = (double)kvp.Value;
                    }
                }
            }//On rajoute un dernier point 
            else
            {
                foreach (KeyValuePair<string, object> kvp in tableauRaw[i-1])
                {

                    
                     if (kvp.Key == "X")
                    {
                        dynamicObj.X = (double)kvp.Value - 175;
                    
                    }
                    
                    if (kvp.Key == "count")
                    {
                        dynamicObj.count = (int)kvp.Value-1;
                    }

                }
                foreach (KeyValuePair<string, object> kvp in tableauRaw[moitie])
                {  
                    if (kvp.Key == "Y")
                    {
                        dynamicObj.Y = (double)kvp.Value;
                    }
                    else if (kvp.Key == "Z")
                    {
                        dynamicObj.Z = (double)kvp.Value;
                    }
                }
            }

            return dynamicObj;
        }).Cast<ExpandoObject>().ToList<ExpandoObject>();
    }



    @*méthode permettant le rafraichissement des graphiques*@
    public void refresh(ActionEventArgs<ExpandoObject> args)
    {

        this.setCartesien();
        Chart.RefreshAsync();

    }

    @*Change la valeur de swap*@
    public void clickBtnChange()
    {
        //Méthode s'activant à l'appui du boutton Polar/Cartesien
        this.swap = !swap;

    }


    //Permet de définir le tableauRaw et tableauCart des données lors du binding dans le tableau
    public void SetTabs(ChangeEventArgs<string,string> args)
    {

        string[] cnt = ants.SearchAntenneByName(selected).GetContent();
        this.tableauRaw = new List<ExpandoObject>();
        var ci = (CultureInfo)CultureInfo.CurrentCulture.Clone();
        ci.NumberFormat.NumberDecimalSeparator = ".";
        string pattern = @"([0-9\.\S])+";
        Regex rgx = new Regex(pattern);
        int maxindex = ants.SearchAntenneByName(selected).GetTaille();
        this.tableauRaw = Enumerable.Range(5,maxindex).Select((i) =>
        {


            string str = cnt[i];

            double az = double.Parse(rgx.Matches(str)[0].Value, ci);
            double amp = double.Parse(rgx.Matches(str)[1].Value, ci);
            double phase = double.Parse(rgx.Matches(str)[2].Value, ci);


            dynamic dynamicObj = new ExpandoObject();
            dynamicObj.count = i - 5;
            dynamicObj.X = az;
            dynamicObj.Y = amp;
            dynamicObj.Z = phase;

            return dynamicObj;
        }).Cast<ExpandoObject>().ToList<ExpandoObject>();



        this.setCartesien();
    }


    //Classe Antenne ayant un Nom, un Chemin et un Contenu
    //Une représentation "Raw" (données pures)
    //Une représentation cartesienne
    public class Antenne
    {
        //Attributs
        private string Nom { get; set; }
        private string Path { get; set; }
        private string[] Contenu { get; set; }
        private int taille { get; set; }
        

        //Constructeur de la classe Antenne
        public Antenne(string nom, string path, string[] contenu)
        {
            this.Nom = nom;

            this.Path = path;

            string pat = @"([^a-z ])([.0-9])+";
            Regex rgx = new Regex(pat);
            this.taille = int.Parse(rgx.Matches(contenu[2])[0].Value);


            this.Contenu = contenu;

            
        }

        public int GetTaille()
        {
            return this.taille;
        }

        public string GetNom()
        {
            return this.Nom;
        }

        public string GetPath()
        {
            return this.Path;
        }

        public string[] GetContent()
        {
            return this.Contenu;
        }
    }




    //Classe Antennes : stocke les Antennes présente dans le dossier sous forme d'une liste d'antenne
    public class Antennes
    {
        private const string folderPath = @"C:\Users\DME\source\repos\ATOLL\ATOLL\Resources\Antennas\Antenna types";
        private List<Antenne> l { get; set; }


        //Constructeur de Antennes
        public Antennes()
        {
            DirectoryInfo place = new DirectoryInfo(folderPath);
            FileInfo[] files = place.GetFiles();
            this.l = new List<Antenne>();
            foreach(FileInfo file in files)
            {
                string filePath = folderPath + "\\" + file.Name;
                Antenne x = new Antenne(file.Name, filePath, System.IO.File.ReadAllLines(filePath));
                l.Add(x);
            }
        }

        //getter de la Liste
        public List<Antenne> GetListe()
        {
            return this.l;
        }

        public List<string> GetNoms()
        {
            List<string> noms = new List<string>();
            foreach(Antenne a in this.l)
            {
                noms.Add(a.GetNom());
            }
            return noms;
        }

        //Méthode permettant de rechercher une antenne avec son Nom
        public Antenne SearchAntenneByName(string nom)
        {
            foreach(Antenne a in this.l)
            {
                if (a.GetNom() == nom)
                {
                    return a;
                }
            }
            return null;
        }

        public Antenne GetFirst()
        {
            return this.l[0];
        }
    }

}

  